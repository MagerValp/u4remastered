SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
    __STACKSIZE__: type = weak, value = $0800; # 2k stack
}

MEMORY {
    ZP:             start = $0002,  size =   $1a,               define = yes,   file = "";
    STACK:          start =  $100,  size =   $80,                               file = "";
    COPYEDITOR:     start =  $100,  size =   $80,                               file = "";
    LOADADDR:       start = $07ff,  size =     2,                               file = %O;
    RAM:            start = $0801,  size = $77ff-__STACKSIZE__, define = yes,   file = %O;
    HIRAM:          start = $c000,  size =  $400,                               file = "";

    # Bank 00.
    EASYAPI:        start = $b800,  size =  $300,   fill = yes, fillval = $ff,  file = "";

    # Bank 01.
    EDITOR:         start = $8000,  size = $4000,   fill = yes, fillval = $ff,  file = "";

    # Bank 02-05.
    GAME:           start =  $400,  size =$10000,   fill = yes, fillval = $ff,  file = "";
}

SEGMENTS {

    LOADADDR:       load = LOADADDR,                type = ro;
    EXEHDR:         load = RAM,                     type = ro;
    STARTUP:        load = RAM,                     type = ro,                  optional = yes;
    LOWCODE:        load = RAM,                     type = ro,                  optional = yes;
    INIT:           load = RAM,                     type = ro,  define = yes,   optional = yes;
    CODE:           load = RAM,                     type = ro;
    RODATA:         load = RAM,                     type = ro;
    DATA:           load = RAM,                     type = rw;
    COPYGAME:       load = RAM, run = STACK,        type = rw,  define = yes;
    COPYEDITOR:     load = RAM, run = COPYEDITOR,   type = rw,  define = yes;
    ZPSAVE:         load = RAM,                     type = bss;
    BSS:            load = RAM,                     type = bss, define = yes;
    HEAP:           load = RAM,                     type = bss,                 optional = yes; # must sit just below stack
    ZEROPAGE:       load = ZP,                      type = zp,  define = yes;

    EASYAPI:        load = EASYAPI, run = HIRAM,    type = ro,  define = yes,   align =  $100;

    GAME:           load = GAME,                    type = ro,                  align =  $100;

    EDITOR:         load = EDITOR,                  type = ro,  define = yes;
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = INIT;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
