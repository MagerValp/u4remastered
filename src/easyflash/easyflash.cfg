SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
    __STACKSIZE__: type = weak, value = $0800; # 2k stack
}

MEMORY {
    ZP:             start = $0002,  size =   $1a,               define = yes,   file = "";
    BOOTSTRAP:      start =  $100,  size =   $80,                               file = "";
    RAM:            start = $0800,  size = $7800-__STACKSIZE__, define = yes,   file = "";
    HIRAM:          start = $c000,  size =  $400,                               file = "";
    LOADADDR:       start = $0000,  size =     2,                               file = "";
    HEADER:         start = $0000,  size =   $0c,                               file = "";

    # Bank 00.
    CART:           start = $8000,  size = $3800,   fill = yes, fillval = $ff,  file = %O;
    EASYAPI:        start = $b800,  size =  $300,   fill = yes, fillval = $ff,  file = %O;
    PAD:            start = $bb00,  size =  $400,   fill = yes, fillval = $ff,  file = %O;
    ULTIMAX:        start = $ff00,  size =   $fa,   fill = yes, fillval = $ff,  file = %O;
    ULTIMAXVEC:     start = $fffa,  size =     6,   fill = yes, fillval = $ff,  file = %O;

    # Bank 01.
    EDITOR:         start = $8000,  size = $4000,   fill = yes, fillval = $ff,  file = %O;

    # Bank 02-05.
    GAME:           start =  $400,  size =$10000,   fill = yes, fillval = $ff,  file = %O;

    # EFS starts in bank 06.
}

SEGMENTS {
    EASYAPI:        load = EASYAPI, run = HIRAM,    type = ro,  align =  $100,  define = yes;
    ULTIMAX:        load = ULTIMAX,                 type = ro,  align =  $100;
    ULTIMAXVEC:     load = ULTIMAXVEC,              type = ro,  start = $fffa;
    BOOTSTRAP:      load = ULTIMAX, run = BOOTSTRAP,type = rw,  define = yes;

    LOADADDR:       load = LOADADDR,            type = ro;
    EXEHDR:         load = HEADER,              type = ro;
    STARTUP:        load = CART,                type = ro,                  optional = yes;
    LOWCODE:        load = CART,                type = ro,                  optional = yes;
    INIT:           load = CART,                type = ro,  define = yes,   optional = yes;
    CODE:           load = CART,                type = ro,  define = yes;
    RODATA:         load = CART,                type = ro,  define = yes;
#   DATA:           load = CART, run = RAM,     type = rw,  define = yes;
    BSS:            load = RAM,                 type = bss, define = yes;
    HEAP:           load = RAM,                 type = bss,                 optional = yes; # must sit just below stack
    ZEROPAGE:       load = ZP,                  type = zp,  define = yes;

    LOADER:         load = CART, run = HIRAM,   type = ro,  define = yes;
    GAME:           load = GAME,                type = ro,  align =  $100;

    EDITOR:         load = EDITOR,              type = ro,  define = yes;
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = INIT;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
